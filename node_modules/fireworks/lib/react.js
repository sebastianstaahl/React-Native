"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const fireworks_1 = __importDefault(require("./fireworks"));
class Fireworks extends React.Component {
    constructor() {
        super(...arguments);
        this._ivl = 0;
        this._idle = false;
        this._ref = null;
    }
    render() {
        return React.createElement('div', {
            ref: ref => (this._ref = ref),
            className: 'react-fireworks'
        });
    }
    componentDidMount() {
        let self = this;
        let { interval } = this.props;
        if (interval) {
            this._ivl = window.setInterval(function () {
                if (self._idle)
                    return;
                self.evaluate();
            }, interval);
            this.evaluate();
        }
        else {
            this.evaluate();
        }
    }
    onIdle() {
        this._idle = true;
    }
    componentWillUnmount() {
        if (this._ivl) {
            clearInterval(this._ivl);
        }
    }
    evaluate() {
        let _a = this.props, { count, calc, interval } = _a, props = __rest(_a, ["count", "calc", "interval"]);
        let input = props;
        if (!input.parentNode) {
            if (this._ref) {
                input.parentNode = this._ref;
            }
        }
        for (let i = 0; i < (count || 1); i++) {
            fireworks_1.default(calc ? calc(props, i) : input);
        }
    }
}
exports.Fireworks = Fireworks;
exports.default = Fireworks;
